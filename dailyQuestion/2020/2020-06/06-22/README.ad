= 二叉树中的最大路径和
:toc:
:toc-title: 目录
:toclevels: 5
:sectnums:

== 说明
给定一个非空二叉树，返回其最大路径和。

本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。

示例 1:
```
输入: [1,2,3]

       1
      / \
     2   3

输出: 6
```
示例 2:
```
输入: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

输出: 42
```

== 参考
- https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/

== 题解
image:images/1.jpg[]


```go
func maxPathSum(root *TreeNode) int {
	maxPath := math.MinInt32
	var maxGain func(root *TreeNode) int
	maxGain = func(root *TreeNode) int {
		if root == nil {
			return 0
		}
		leftGain := max(maxGain(root.Left), 0)
		rightGain := max(maxGain(root.Right), 0)
		maxPath = max(maxPath, root.Val+leftGain+rightGain)
		return root.Val + max(leftGain, rightGain)
	}
	maxGain(root)
	return maxPath
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}
```

复杂度:

- 时间复杂度: O(N), N是节点的个数, 对每个节点最多不会超过两次
- 空间复杂度: O(N), 其中 NN 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。
